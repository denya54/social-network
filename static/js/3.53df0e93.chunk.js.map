{"version":3,"sources":["hoc/withAuthRedirect.tsx","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPost.module.css","components/Profile/MyPosts/Post1/Post.module.css","components/Profile/ProfileInfo/ProfileStatus.tsx","assets/images/nophotoava.png","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post1/Post.tsx","components/Profile/MyPosts/MyPost.tsx","components/Profile/MyPosts/MyPostContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["mapStateToProps","state","isAuth","auth","withAuthRedirect","Component","connect","props","restProps","to","_slicedToArray","arr","i","Array","isArray","Symbol","iterator","Object","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","value","length","err","unsupportedIterableToArray","TypeError","module","exports","ProfileStatus","useEffect","setStatus","status","useState","editMode","setEditMode","onChange","e","currentTarget","changeStatus","onBlur","updateStatus","autoFocus","onDoubleClick","ProfileInfo","profile","Preloader","className","classes","descriptionBlock","photos","large","picture","src","mainPhoto","isOwner","type","target","files","savePhoto","Post","item","message","likesCount","MyPost","React","memo","postsElement","statePosts","map","post","postsBlock","AddNewPostReduxForm","onSubmit","values","addPost","newPostText","posts","maxLength10","maxLengthCreator","reduxForm","form","handleSubmit","Field","name","component","Textarea","placeholder","validate","required","MyPostContainer","profilePage","dispatch","text","addPostActionCreator","Profile","setPhoto","ProfileContainer","userId","this","match","params","authorisedUserID","history","getUserProfileWithThunk","getStatusWithThunk","refreshProfile","prevProps","prevState","snapshot","updateStatusWithThunk","updatePhotoWithThunk","compose","id","getUserProfileThunk","getStatusThunk","updateStatusThunk","updatePhotoThunk","withRouter"],"mappings":"2MAOMA,EAAkB,SAACC,GACrB,MAAO,CACHC,OAAQD,EAAME,KAAKD,SAIpB,SAASE,EAAsBC,GAUlC,OAFiCC,YAAQN,EAARM,EAPP,SAACC,GAA6B,IAE/CL,EAAwBK,EAAxBL,OAAWM,EAFoC,YAEvBD,EAFuB,YAIpD,OAAKL,EACE,cAACG,EAAD,eAAeG,IADF,cAAC,IAAD,CAAUC,GAAI,gB,+ECd3B,SAASC,EAAeC,EAAKC,GAC1C,OCLa,SAAyBD,GACtC,GAAIE,MAAMC,QAAQH,GAAM,OAAOA,EDIxB,CAAeA,IELT,SAA+BA,EAAKC,GACjD,GAAsB,qBAAXG,QAA4BA,OAAOC,YAAYC,OAAON,GAAjE,CACA,IAAIO,EAAO,GACPC,GAAK,EACLC,GAAK,EACLC,OAAKC,EAET,IACE,IAAK,IAAiCC,EAA7BC,EAAKb,EAAII,OAAOC,cAAmBG,GAAMI,EAAKC,EAAGC,QAAQC,QAChER,EAAKS,KAAKJ,EAAGK,QAEThB,GAAKM,EAAKW,SAAWjB,GAH8CO,GAAK,IAK9E,MAAOW,GACPV,GAAK,EACLC,EAAKS,EACL,QACA,IACOX,GAAsB,MAAhBK,EAAW,QAAWA,EAAW,SAC5C,QACA,GAAIJ,EAAI,MAAMC,GAIlB,OAAOH,GFnBuB,CAAqBP,EAAKC,IAAM,OAAAmB,EAAA,GAA2BpB,EAAKC,IGLjF,WACb,MAAM,IAAIoB,UAAU,6IHIgF,K,oBIJtGC,EAAOC,QAAU,CAAC,iBAAmB,sCAAsC,QAAU,+B,oBCArFD,EAAOC,QAAU,CAAC,WAAa,2BAA2B,MAAQ,wB,oBCAlED,EAAOC,QAAU,CAAC,KAAO,qB,6ICqCVC,EA/BO,SAAC5B,GAEnB6B,qBAAU,WACNC,EAAU9B,EAAM+B,UAClB,CAAC/B,EAAM+B,SAJ4C,MAMzBC,mBAAShC,EAAM+B,QANU,mBAM9CA,EAN8C,KAMtCD,EANsC,OAUrBE,oBAAS,GAVY,mBAU9CC,EAV8C,KAUpCC,EAVoC,KAmBrD,OACI,8BACKD,EACK,8BAAK,uBAAOZ,MAAOU,EACPI,SAAU,SAACC,GAAD,OAfjB,SAACA,GAAD,OAAsCN,EAAUM,EAAEC,cAAchB,OAexCiB,CAAaF,IAC9BG,OAZC,WACvBL,GAAY,GACZlC,EAAMwC,aAAaT,IAWGU,WAAS,MAErB,8BAAK,sBAAMC,cAVA,kBAAMR,GAAY,IAUxB,SAAwCH,GAAU,mBClC1D,MAA0B,uCC0C1BY,EA3BK,SAAC3C,GAEjB,IAAKA,EAAM4C,QACP,OAAO,cAACC,EAAA,EAAD,IASX,OACI,8BACI,sBAAKC,UAAWC,IAAQC,iBAAxB,UACKhD,EAAM4C,QAAQK,OAAOC,MAAQ,qBAAKJ,UAAWC,IAAQI,QAASC,IAAKpD,EAAM4C,QAAQK,OAAOC,QACrF,qBAAKE,IAAKC,EAAWP,UAAWC,IAAQI,UAE5C,cAAC,EAAD,CACIpB,OAAQ/B,EAAM+B,OACdS,aAAcxC,EAAMwC,eAEvBxC,EAAMsD,SAAW,uLAAiC,uBAAOC,KAAM,OAAQpB,SAhBxD,SAACC,GACF,OAAnBA,EAAEoB,OAAOC,OACTzD,EAAM0D,UAAUtB,EAAEoB,OAAOC,MAAM,gB,4CCL5BE,EAZF,SAAC3D,GACV,OACI,sBAAK8C,UAAWC,IAAQa,KAAxB,UACI,qBACIR,IAAK,wGACRpD,EAAM6D,QACP,gCACI,yCAAmB7D,EAAM8D,kB,kCCLnCC,EAASC,IAAMC,MAAK,SAACjE,GAEvB,IAAIkE,EAAelE,EAAMmE,WAAWC,KAAI,SAAAC,GAAI,OAAI,cAAC,EAAD,CAAMR,QAASQ,EAAKR,QACdC,WAAYO,EAAKP,gBAMvE,OACI,sBAAKhB,UAAWC,IAAQuB,WAAxB,UACI,0CAEA,cAACC,EAAD,CAAqBC,SARb,SAACC,GACbzE,EAAM0E,QAAQD,EAAOE,gBAQjB,qBAAK7B,UAAWC,IAAQ6B,MAAxB,SACKV,UAUbW,EAAcC,YAAiB,IAe7BP,EAAsBQ,YAA8B,CAACC,KAAM,yBAArCD,EAbmD,SAAC/E,GAC5E,OACI,uBAAMwE,SAAUxE,EAAMiF,aAAtB,UACI,8BACI,cAACC,EAAA,EAAD,CAAOC,KAAM,cAAeC,UAAWC,IAAUC,YAAa,UAAWC,SAAU,CAACC,IAAUX,OAElG,8BACI,0DAODd,I,QCRA0B,EAFS1F,aATA,SAACL,GACrB,MAAO,CACHyE,WAAYzE,EAAMgG,YAAYd,UAnBX,SAACe,GACxB,MAAO,CAKHjB,QAAS,SAACkB,GACND,EAASE,YAAqBD,QAmBlB7F,CAA6CgE,GCPtD+B,EAnBC,SAAC9F,GAEb,OACI,gCACI,cAAC,EAAD,CACI4C,QAAS5C,EAAM4C,QACfb,OAAQ/B,EAAM+B,OACdS,aAAcxC,EAAMwC,aACpBc,QAAStD,EAAMsD,QACfI,UAAW1D,EAAM+F,WAMrB,cAAC,EAAD,Q,yBCPNC,E,oKAEF,WACI,IAAIC,EAASC,KAAKlG,MAAMmG,MAAMC,OAAOH,OAChCA,IACDA,EAAUC,KAAKlG,MAAMqG,mBAEjBH,KAAKlG,MAAMsG,QAAQlF,KAAK,UAGhC8E,KAAKlG,MAAMuG,wBAAwBN,GACnCC,KAAKlG,MAAMwG,mBAAmBP,K,+BAGlC,WACIC,KAAKO,mB,gCAGT,SAAmBC,EAAgCC,EAAyBC,GACpEV,KAAKlG,MAAMmG,MAAMC,OAAOH,SAAWS,EAAUP,MAAMC,OAAOH,QAC1DC,KAAKO,mB,oBAKb,WAEI,OACI,cAAC,EAAD,2BACQP,KAAKlG,OADb,IAEIsD,SAAU4C,KAAKlG,MAAMmG,MAAMC,OAAOH,OAClCrD,QAASsD,KAAKlG,MAAM4C,QACpBb,OAAQmE,KAAKlG,MAAM+B,OACnBS,aAAc0D,KAAKlG,MAAM6G,sBACzBd,SAAUG,KAAKlG,MAAM8G,4B,GAlCN9C,IAAMlE,WAsEtBiH,sBACXhH,aA7BkB,SAACL,GAAD,MAAgD,CAClEkD,QAASlD,EAAMgG,YAAY9C,QAC3BgC,MAAOlF,EAAMgG,YAAYd,MACzB7C,OAAQrC,EAAMgG,YAAY3D,OAC1BsE,iBAAkB3G,EAAME,KAAKoH,GAC7BrH,OAAQD,EAAME,KAAKD,UAwBM,CACrB4G,wBAAyBU,IACzBT,mBAAoBU,IACpBL,sBAAuBM,IACvBL,qBAAsBM,MAE1BC,IACAxH,IARWkH,CASbf","file":"static/js/3.53df0e93.chunk.js","sourcesContent":["import React, {ComponentType} from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {StateType} from \"../redux/redux-store\";\r\n\r\ntype MapStatePropsType = { isAuth: boolean }\r\n\r\nconst mapStateToProps = (state: StateType): MapStatePropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport function withAuthRedirect  <T>(Component: ComponentType<T>) {\r\n    const RedirectComponent = (props: MapStatePropsType) => {\r\n        // деструктуризация пропсов:\r\n        let {isAuth, ...restProps} = props\r\n\r\n        if (!isAuth) return <Redirect to={'/login'}/>\r\n        return <Component {...restProps as T}/>\r\n    }\r\n    let ConnectedRedirectComponent = connect(mapStateToProps)(RedirectComponent)\r\n\r\n    return ConnectedRedirectComponent\r\n}","import arrayWithHoles from \"@babel/runtime/helpers/esm/arrayWithHoles\";\nimport iterableToArrayLimit from \"@babel/runtime/helpers/esm/iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableRest from \"@babel/runtime/helpers/esm/nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__3sjtI\",\"picture\":\"ProfileInfo_picture__dwuAz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPost_postsBlock__38F5G\",\"posts\":\"MyPost_posts__2Np6r\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__3frWF\"};","import React, {ChangeEvent, useEffect, useState} from 'react';\r\n\r\ntype ProfileStatusPropsType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nconst ProfileStatus = (props: ProfileStatusPropsType) => {\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    },[props.status])\r\n\r\n    const [status, setStatus] = useState(props.status)\r\n\r\n    let changeStatus = (e: ChangeEvent<HTMLInputElement>) => setStatus(e.currentTarget.value)\r\n\r\n    const [editMode, setEditMode] = useState(false)\r\n\r\n    const deActivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(status)\r\n    }\r\n\r\n    const activateEditMode = () => setEditMode(true)\r\n\r\n    return (\r\n        <div>\r\n            {editMode\r\n                ? <div><input value={status}\r\n                              onChange={(e) => changeStatus(e)}\r\n                              onBlur={deActivateEditMode}\r\n                              autoFocus/>\r\n                </div>\r\n                : <div><span onDoubleClick={activateEditMode}>{status || 'No status'}</span></div>\r\n            }\r\n        </div>)\r\n}\r\nexport default ProfileStatus;","export default __webpack_public_path__ + \"static/media/nophotoava.1845a328.png\";","import React, {ChangeEvent} from 'react';\r\nimport classes from './ProfileInfo.module.css';\r\nimport {UserProfileType} from \"../../../redux/profile-reducer\";\r\nimport {Preloader} from \"../../common/Preloader/Preloader\";\r\nimport ProfileStatus from \"./ProfileStatus\";\r\nimport mainPhoto from \"../../../assets/images/nophotoava.png\";\r\n\r\ntype ProfileInfoPropsType = {\r\n    profile: UserProfileType | null\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (photo: File) => void\r\n}\r\n\r\nconst ProfileInfo = (props: ProfileInfoPropsType) => {\r\n\r\n    if (!props.profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files !== null) {\r\n            props.savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={classes.descriptionBlock}>\r\n                {props.profile.photos.large ? <img className={classes.picture} src={props.profile.photos.large}/> :\r\n                    <img src={mainPhoto} className={classes.picture}/>}\r\n\r\n                <ProfileStatus\r\n                    status={props.status}\r\n                    updateStatus={props.updateStatus}\r\n                />\r\n                {props.isOwner && <div>Для загрузки нового аватара <input type={'file'} onChange={onMainPhotoSelected}/></div>}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default ProfileInfo;","import React from 'react';\r\nimport classes from './Post.module.css'\r\nimport {postType} from \"../../../../redux/profile-reducer\";\r\n\r\n\r\n\r\nconst Post = (props: postType) => {\r\n    return (\r\n        <div className={classes.item}>\r\n            <img\r\n                src={'https://i.pinimg.com/236x/ad/f8/46/adf8468dafd48dc33091e0790d000c0e--dog-breath-high-five.jpg?nii=t'}/>\r\n            {props.message}\r\n            <div>\r\n                <span>like </span>{props.likesCount}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default Post;","import classes from './MyPost.module.css'\r\nimport React from \"react\";\r\nimport Post from \"./Post1/Post\";\r\nimport {MyPostPropsType} from \"./MyPostContainer\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators\";\r\nimport {Textarea} from \"../../common/FormsControls/FormsConrols\";\r\n\r\nconst MyPost = React.memo((props: MyPostPropsType) => {\r\n\r\n    let postsElement = props.statePosts.map(post => <Post message={post.message}\r\n                                                          likesCount={post.likesCount}/>)\r\n\r\n    let onAddPost = (values: any) => {\r\n        props.addPost(values.newPostText)\r\n    }\r\n\r\n    return (\r\n        <div className={classes.postsBlock}>\r\n            <h3>My posts</h3>\r\n\r\n            <AddNewPostReduxForm onSubmit={onAddPost}/>\r\n            <div className={classes.posts}>\r\n                {postsElement}\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\ntype MyPostFormDataType = {\r\n    newPostText: string\r\n}\r\n\r\nlet maxLength10 = maxLengthCreator(10)\r\n\r\nexport const AddNewPostForm: React.FC<InjectedFormProps<MyPostFormDataType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field name={'newPostText'} component={Textarea} placeholder={'Post me'} validate={[required, maxLength10]}/>\r\n            </div>\r\n            <div>\r\n                <button>Add new post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddNewPostReduxForm = reduxForm<MyPostFormDataType>({form: 'ProfileAddNewPostForm'})(AddNewPostForm)\r\nexport default MyPost;","import React from \"react\";\r\nimport {addPostActionCreator, postType} from \"../../../redux/profile-reducer\";\r\nimport MyPost from \"./MyPost\";\r\nimport {StateType} from \"../../../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\nimport {Dispatch} from \"redux\";\r\n\r\n\r\nexport type MapDispatchReturnType = {\r\n    // updateNewPostText: (text: string) => void\r\n    addPost: (text: string) => void\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchReturnType => {\r\n    return {\r\n        // updateNewPostText: (text: string) => {\r\n        //     let action = updateNewPostTextActionCreator(text)\r\n        //     dispatch(action);\r\n        // },\r\n        addPost: (text: string) => {\r\n            dispatch(addPostActionCreator(text));\r\n        }\r\n    }\r\n}\r\n\r\nexport type MapStatePropsReturnType = {\r\n    statePosts: Array<postType>\r\n    // newPostText: string\r\n}\r\n\r\nconst mapStateToProps = (state: StateType) : MapStatePropsReturnType => {\r\n    return {\r\n        statePosts: state.profilePage.posts,\r\n        // newPostText: state.profilePage.newPostText\r\n    }\r\n}\r\n\r\nexport type MyPostPropsType = MapDispatchReturnType & MapStatePropsReturnType\r\n\r\nconst MyPostContainer = connect(mapStateToProps, mapDispatchToProps)(MyPost)\r\n\r\nexport default MyPostContainer;","import React from 'react';\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostContainer from \"./MyPosts/MyPostContainer\";\r\nimport {UserProfileType} from \"../../redux/profile-reducer\";\r\n\r\ntype ProfilePropsType = {\r\n    profile: UserProfileType | null\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    setPhoto: (photo: File) => void\r\n}\r\n\r\nconst Profile = (props: ProfilePropsType) => {\r\n    // myID=20162\r\n    return (\r\n        <div>\r\n            <ProfileInfo\r\n                profile={props.profile}\r\n                status={props.status}\r\n                updateStatus={props.updateStatus}\r\n                isOwner={props.isOwner}\r\n                savePhoto={props.setPhoto}\r\n            />\r\n            {/*<MyPost statePosts={props.stateProfile.posts}*/}\r\n            {/*        dispatch={props.dispatch}*/}\r\n            {/*        newPostText={props.stateProfile.newPostText}*/}\r\n            {/*/>*/}\r\n            <MyPostContainer/>\r\n        </div>\r\n    )\r\n}\r\nexport default Profile;","import React from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {StateType} from \"../../redux/redux-store\";\r\nimport {\r\n    getStatusThunk,\r\n    getUserProfileThunk,\r\n    postType, updatePhotoThunk, updateStatusThunk,\r\n    UserProfileType\r\n} from \"../../redux/profile-reducer\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\ntype PropsType = RouteComponentProps<PathParamsType> & ProfilePropsType\r\n\r\n\r\nclass ProfileContainer extends React.Component <PropsType> {\r\n\r\n    refreshProfile(){\r\n        let userId = this.props.match.params.userId\r\n        if (!userId) {\r\n            userId =  this.props.authorisedUserID\r\n            if (!userId) {\r\n                this.props.history.push('/login')\r\n            }\r\n        }\r\n        this.props.getUserProfileWithThunk(userId);\r\n        this.props.getStatusWithThunk(userId)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<PropsType>, prevState: Readonly<{}>, snapshot?: any) {\r\n        if (this.props.match.params.userId !== prevProps.match.params.userId ) {\r\n            this.refreshProfile()\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        // if (!this.props.isAuth) return <Redirect to={'/login'}/>\r\n        return (\r\n            <Profile\r\n                {...this.props}\r\n                isOwner={!this.props.match.params.userId}\r\n                profile={this.props.profile}\r\n                status={this.props.status}\r\n                updateStatus={this.props.updateStatusWithThunk}\r\n                setPhoto={this.props.updatePhotoWithThunk}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\n// let AuthRedirectComponent = withAuthRedirect(ProfileContainer)\r\n\r\nlet mapStateToProps = (state: StateType): MapStatePropsReturnType => ({\r\n    profile: state.profilePage.profile,\r\n    posts: state.profilePage.posts,\r\n    status: state.profilePage.status,\r\n    authorisedUserID: state.auth.id,\r\n    isAuth: state.auth.isAuth\r\n\r\n})\r\n\r\ntype MapStatePropsReturnType = {\r\n    posts: Array<postType>\r\n    profile: UserProfileType | null\r\n    status: string\r\n    authorisedUserID: string\r\n    isAuth: boolean\r\n}\r\n\r\ntype MapDispatchPropsReturnType = {\r\n    // setUserProfile: (profile: UserProfileType) => void\r\n    getUserProfileWithThunk: (userId: string ) => void\r\n    getStatusWithThunk: (userId: string)  => void\r\n    updateStatusWithThunk: (status: string) => void\r\n    updatePhotoWithThunk: (photo: File) => void\r\n}\r\n\r\n\r\nexport type ProfilePropsType = MapDispatchPropsReturnType & MapStatePropsReturnType\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {\r\n        getUserProfileWithThunk: getUserProfileThunk,\r\n        getStatusWithThunk: getStatusThunk,\r\n        updateStatusWithThunk: updateStatusThunk,\r\n        updatePhotoWithThunk: updatePhotoThunk\r\n    }),\r\n    withRouter,\r\n    withAuthRedirect\r\n)(ProfileContainer)"],"sourceRoot":""}