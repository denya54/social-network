{"version":3,"sources":["assets/images/Spinner-1s-200px.svg","components/common/Preloader/Preloader.tsx","components/Header/Header.module.css","redux/profile-reducer.ts","redux/dialog-reducer.ts","redux/users-reducer.ts","api/api.ts","components/NavBar/NavBar.module.css","components/NavBar/NavBar.tsx","components/Header/Header.tsx","redux/auth-reducer.ts","components/Header/HeaderContainer.tsx","redux/app-reducer.ts","components/Login/LoginFormik.tsx","App.tsx","reportWebVitals.ts","redux/redux-store.ts","index.tsx"],"names":["Preloader","style","backgroundColor","src","preloader","module","exports","ADD_POST","SET_USER_PROFILE","SET_STATUS","DELETE_POST","SET_PHOTO","initialState","posts","id","message","likesCount","profile","status","addPostActionCreator","postText","type","postMessage","setStatusActionCreator","getUserProfileThunk","userId","dispatch","a","userAPI","getProfile","response","data","getStatusThunk","profileAPI","getStatus","updateStatusThunk","updateStatus","resultCode","updatePhotoThunk","photo","updatePhoto","photos","updateProfileThunk","profileData","getState","myID","auth","updateMyProfile","profileReducer","state","action","filter","p","postID","SEND_MESSAGE","dialogNames","name","ava","dialogMessages","sendMessageCreator","messageText","NewText","dialogReducer","body","FOLLOW","UNFOLLOW","SET_USERS","SET_CURRENT_PAGE","SET_TOTAL_USERS_COUNT","TOGGLE_IS_FETCHING","TOGGLE_IS_FOLLOWING_PROGRESS","users","pageSize","totalUsersCount","currentPage","isFetching","followingInProgress","followAC","userID","unFollowAC","setUsersAC","setCurrentPageAC","pageNumber","setTotalUsersCountAC","totalCount","toggleIsFetching","followingProgressAC","requestUsersThunkCreator","getUsers","items","followUnfollowFlow","apiMethod","actionCreator","followThunk","follow","bind","unFollowThunk","unfollow","usersReducer","map","user","followed","instance","axios","create","withCredentials","headers","baseURL","get","then","post","delete","newStatus","put","formData","FormData","append","authAPI","me","login","email","password","rememberMe","captcha","logout","securityAPI","getCaptchaUrl","NavBar","className","classes","nav","item","to","activeClassName","activeLink","active","Header","props","header","loginBlock","isAuth","onClick","logoutTC","SET_USER_DATA","GET_CAPTCHA_URL","GET_AUTH_ERROR","error","setAuthUserData","payload","getCaptchaUrlAC","captchaURL","getAuthUserDataThunk","getCaptchaURLTC","url","authReducer","HeaderContainer","this","React","Component","connect","SET_INITIALIZED","initialized","appReducer","LoginFormik","useSelector","isAuthError","useDispatch","formik","useFormik","initialValues","onSubmit","values","messages","length","loginTC","validate","errors","handleSubmit","onChange","handleChange","value","onBlur","handleBlur","touched","color","checked","DialogsContainer","lazy","ProfileContainer","UsersContainer","App","initializeAppWithThunk","path","render","app","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","reducers","combineReducers","profilePage","dialogsPage","usersPage","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","Suspense","fallback","document","getElementById"],"mappings":"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","file":"static/js/main.70c2c1b3.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/Spinner-1s-200px.0a5f0db6.svg\";","import preloader from \"../../../assets/images/Spinner-1s-200px.svg\";\r\nimport React from \"react\";\r\n\r\n\r\nexport const Preloader = () => {\r\n    return  <div style={{backgroundColor: 'white'}}> <img src={preloader}/> </div>\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__36BEZ\",\"loginBlock\":\"Header_loginBlock__2fS4w\"};","import {profileAPI, userAPI} from \"../api/api\";\r\nimport {StateType} from \"./redux-store\";\r\n\r\nexport type contactsType = {\r\n    facebook: string | null\r\n    website: string | null\r\n    vk: string | null\r\n    twitter: string | null\r\n    instagram: string | null\r\n    youtube: string | null\r\n    github: string | null\r\n    mainLink: string | null\r\n}\r\n\r\ntype photosType = {\r\n    small: string | undefined\r\n    large: string | undefined\r\n}\r\n\r\nexport type UserProfileType = {\r\n    aboutMe?: string\r\n    contacts?: contactsType\r\n    lookingForAJob?: boolean\r\n    lookingForAJobDescription?: string\r\n    fullName?: string\r\n    userId?: string\r\n    photos: photosType\r\n}\r\n\r\nexport type profileStatusType = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: object\r\n}\r\n\r\nexport type profilePhotoType = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: {\r\n        photos: {\r\n            small: string\r\n            large: string\r\n        }\r\n    }\r\n}\r\n\r\nconst ADD_POST = 'profile/ADD-POST'\r\nconst SET_USER_PROFILE = 'profile/SET-USER-PROFILE'\r\nconst SET_STATUS = 'profile/SET-STATUS'\r\nconst DELETE_POST = 'profile/DELETE-POST'\r\nconst SET_PHOTO = 'profile/SET-PHOTO'\r\n\r\nexport type postType = {\r\n    id?: number\r\n    message: string\r\n    likesCount: number\r\n}\r\n\r\nexport type profilePageType = {\r\n    posts: Array<postType>\r\n    profile: UserProfileType | null\r\n    status: string\r\n}\r\n\r\n\r\nlet initialState: profilePageType = {\r\n    posts: [\r\n        {id: 1, message: \"My first GAV\", likesCount: 12},\r\n        {id: 2, message: \"Don`t like Myay\", likesCount: 10},\r\n        {id: 3, message: \"How do you do\", likesCount: 16},\r\n    ] as Array<postType>,\r\n    profile: null,\r\n    status: \"\",\r\n};\r\n\r\nconst profileReducer = (state: profilePageType = initialState, action: ActionProfileType): profilePageType => {\r\n    switch (action.type) {\r\n        case ADD_POST:\r\n            return {\r\n                ...state,\r\n                // newPostText: '',\r\n                posts: [...state.posts, {\r\n                    id: 4,\r\n                    message: action.postMessage,\r\n                    likesCount: 0\r\n                }]\r\n            }\r\n        case SET_USER_PROFILE: {\r\n            return {...state, profile: action.profile}\r\n        }\r\n        case SET_STATUS: {\r\n            return {\r\n                ...state, status: action.status\r\n            }\r\n        }\r\n        case DELETE_POST: {\r\n            return {...state, posts: state.posts.filter(p => p.id !== action.postID)}\r\n        }\r\n        case SET_PHOTO: {\r\n            return {...state, profile: {...state.profile, photos: action.photos}}\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport type AddPostActionType = ReturnType<typeof addPostActionCreator>\r\nexport type SetUserProfileReturnType = ReturnType<typeof setUserProfileAC>\r\nexport type SetStatusReturnType = ReturnType<typeof setStatusActionCreator>\r\nexport type DeletePostReturnType = ReturnType<typeof deletePostActionCreator>\r\nexport type SetPhotoReturnType = ReturnType<typeof setPhotoActionCreator>\r\n\r\ntype ActionProfileType = AddPostActionType\r\n    | SetUserProfileReturnType\r\n    | SetStatusReturnType\r\n    | DeletePostReturnType\r\n    | SetPhotoReturnType\r\n\r\nexport const addPostActionCreator = (postText: string) => ({type: ADD_POST, postMessage: postText} as const)\r\nexport const setUserProfileAC = (profile: UserProfileType) => ({type: SET_USER_PROFILE, profile} as const)\r\nexport const setStatusActionCreator = (status: string) => ({type: SET_STATUS, status} as const)\r\nexport const deletePostActionCreator = (postID: number) => ({type: DELETE_POST, postID} as const)\r\nexport const setPhotoActionCreator = (photos: photosType) => ({type: SET_PHOTO, photos} as const)\r\nexport const setMyProfileActionCreator = (photos: photosType) => ({type: SET_PHOTO, photos} as const)\r\n\r\n\r\nexport const getUserProfileThunk = (userId: string) => async (dispatch: any) => {\r\n    let response = await userAPI.getProfile(userId)\r\n    dispatch(setUserProfileAC(response.data))\r\n}\r\n\r\nexport const getStatusThunk = (userId: string) => async (dispatch: any) => {\r\n    let response = await profileAPI.getStatus(userId)\r\n    dispatch(setStatusActionCreator(response.data))\r\n}\r\n\r\nexport const updateStatusThunk = (status: string) => async (dispatch: any) => {\r\n    let response = await profileAPI.updateStatus(status)\r\n    if (response.data.resultCode === 0)\r\n        dispatch(setStatusActionCreator(status))\r\n}\r\n\r\nexport const updatePhotoThunk = (photo: File) => async (dispatch: any) => {\r\n    let response = await profileAPI.updatePhoto(photo)\r\n    if (response.data.resultCode === 0)\r\n        dispatch(setPhotoActionCreator(response.data.data.photos))\r\n}\r\n\r\nexport type ProfileDataType = {\r\n    fullName?: string\r\n    aboutMe?: string\r\n    lookingForAJob?: boolean\r\n    lookingForAJobDescription?: string\r\n    contacts?: {\r\n        github?: string\r\n        vk?: string\r\n        facebook?: string\r\n        instagram?: string\r\n        twitter?: string\r\n        website?: string\r\n        youtube?: string\r\n        mainLink?: string\r\n    }\r\n\r\n}\r\n\r\nexport const updateProfileThunk = (profileData: ProfileDataType) => async (dispatch: any, getState: () => StateType) => {\r\n    const myID = getState().auth.id\r\n    let response = await profileAPI.updateMyProfile(profileData)\r\n    debugger\r\n    if (response.data.resultCode === 0) {\r\n\r\n        dispatch(getUserProfileThunk(myID))\r\n    }\r\n}\r\n\r\nexport default profileReducer;\r\n\r\n","\r\nconst SEND_MESSAGE = 'dialog/SEND_MESSAGE'\r\n\r\nexport type dialogNameType = {\r\n    id: number\r\n    name: string\r\n    ava: string\r\n}\r\n\r\nexport type dialogMessageType = {\r\n    id: number\r\n    message: string\r\n}\r\n\r\nexport type dialogsPageType = {\r\n    dialogNames: Array<dialogNameType>\r\n    dialogMessages: Array<dialogMessageType>\r\n}\r\n\r\n\r\nlet initialState = {\r\n    dialogNames: [\r\n        {id: 1, name: \"Sharik\", ava: \"https://wallpaperim.net/_data/i/upload/2014/09/18/20140918448607-c935d187-me.jpg\"},\r\n        {id: 2, name: \"Archi\", ava: \"https://f.vividscreen.info/soft/ecbda7af9f74e75f084553dbfbcdccff/Nice-Dog-Muzzle-640x480.jpg\"},\r\n        {id: 3, name: \"Betty\", ava: \"https://scouteu.s3.amazonaws.com/cards/images_vt/merged/i_feel_so_lonely_without_you_1.jpg\"},\r\n        {id: 4, name: \"Tyzik\", ava: \"http://file.mobilmusic.ru/45/88/24/1369559-240.jpg\"},\r\n        {id: 5, name: \"Baron\", ava: \"https://i.ytimg.com/vi/S1C608GfriM/hqdefault.jpg\"},\r\n    ] as Array<dialogNameType>,\r\n    dialogMessages: [\r\n        {id: 1, message: \"Gav Gav\"},\r\n        {id: 2, message: \"RRRR\"},\r\n        {id: 3, message: \"Af Af\"},\r\n        {id: 4, message: \"AYYYYYYyyyy\"},\r\n        {id: 5, message: \"Tzyav\"},\r\n    ] as Array<dialogMessageType>,\r\n};\r\n\r\nexport const dialogReducer = (state: dialogsPageType = initialState, action: ActionDialogType) :dialogsPageType => {\r\n\r\n    switch (action.type) {\r\n        case SEND_MESSAGE:\r\n            let body = action.NewText\r\n            return  {...state,\r\n                dialogMessages: [...state.dialogMessages, {id: 6, message: body} ]}\r\n        default: return state\r\n    }\r\n}\r\n\r\nexport type SendMessageType = ReturnType<typeof sendMessageCreator>\r\ntype ActionDialogType = SendMessageType\r\n\r\nexport const sendMessageCreator = (messageText: string) => ({type: SEND_MESSAGE, NewText: messageText} as const)\r\n\r\nexport default dialogReducer;\r\n","import {userAPI} from \"../api/api\";\r\nimport {AxiosResponse} from \"axios\";\r\n\r\nexport type locationType = {\r\n    city: string\r\n    country: string\r\n}\r\n\r\nexport type photosType = {\r\n    small: string | null\r\n    large: string | null\r\n}\r\n\r\nexport type UserType = {\r\n    name: string\r\n    id: number\r\n    uniqueUrlName: string | null\r\n    photos: photosType\r\n    status: string\r\n    followed: boolean\r\n    photoUrl?: string\r\n    location?: locationType\r\n}\r\n\r\nexport type UsersType = {\r\n    users: Array<UserType>\r\n    pageSize: number\r\n    totalUsersCount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    followingInProgress: Array<any>\r\n}\r\n\r\nconst FOLLOW = 'users/FOLLOW'\r\nconst UNFOLLOW = 'users/UN-FOLLOW'\r\nconst SET_USERS = 'users/SET-USERS'\r\nconst SET_CURRENT_PAGE = 'users/SET-CURRENT-PAGE'\r\nconst SET_TOTAL_USERS_COUNT = 'users/SET-TOTAL-USERS-COUNT'\r\nconst TOGGLE_IS_FETCHING = 'users/TOGGLE-IS-FETCHING'\r\nconst TOGGLE_IS_FOLLOWING_PROGRESS = 'users/TOGGLE_IS_FOLLOWING_PROGRESS'\r\n\r\nlet initialState: UsersType = {\r\n    users: [],\r\n    pageSize: 10,\r\n    totalUsersCount: 15368,\r\n    currentPage: 1,\r\n    isFetching: false,\r\n    followingInProgress: []\r\n}\r\n\r\nconst usersReducer = (state: UsersType = initialState, action: ActionUserType): UsersType => {\r\n    switch (action.type) {\r\n        case FOLLOW:\r\n            return {\r\n                ...state,\r\n                users: state.users.map(user => user.id === action.userID ? {...user, followed: true} : user)\r\n            }\r\n        case UNFOLLOW:\r\n            return {\r\n                ...state,\r\n                users: state.users.map(user => user.id === action.userID ? {...user, followed: false} : user)\r\n            }\r\n        case SET_USERS:\r\n            return {\r\n                ...state, users: [...action.users]\r\n            }\r\n        case SET_CURRENT_PAGE:\r\n            return {\r\n                ...state, currentPage: action.pageNumber\r\n            }\r\n        case SET_TOTAL_USERS_COUNT:\r\n            return {\r\n                ...state, totalUsersCount: action.totalCount\r\n            }\r\n        case TOGGLE_IS_FETCHING:\r\n            return {\r\n                ...state, isFetching: action.isFetching\r\n            }\r\n        case TOGGLE_IS_FOLLOWING_PROGRESS:\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetching\r\n                    ? [...state.followingInProgress, action.userId]\r\n                    : [...state.followingInProgress.filter(userId => userId !== action.userId)]\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const followAC = (userID: number) => ({type: FOLLOW, userID} as const)\r\nexport const unFollowAC = (userID: number) => ({type: UNFOLLOW, userID} as const)\r\nexport const setUsersAC = (users: Array<UserType>) => ({type: SET_USERS, users} as const)\r\nexport const setCurrentPageAC = (pageNumber: number) => ({type: SET_CURRENT_PAGE, pageNumber} as const)\r\nexport const setTotalUsersCountAC = (totalCount: number) => ({type: SET_TOTAL_USERS_COUNT, totalCount} as const)\r\nexport const toggleIsFetching = (isFetching: boolean) => ({type: TOGGLE_IS_FETCHING, isFetching} as const)\r\nexport const followingProgressAC = (isFetching: boolean, userId: number) => ({\r\n    type: TOGGLE_IS_FOLLOWING_PROGRESS,\r\n    isFetching,\r\n    userId\r\n} as const)\r\n\r\nexport type followACReturnType = ReturnType<typeof followAC>\r\nexport type unFollowACReturnType = ReturnType<typeof unFollowAC>\r\nexport type setUsersACReturnType = ReturnType<typeof setUsersAC>\r\nexport type setCurrentReturnType = ReturnType<typeof setCurrentPageAC>\r\nexport type setTotalUsersCountReturnType = ReturnType<typeof setTotalUsersCountAC>\r\nexport type toggleIsFetchingReturnType = ReturnType<typeof toggleIsFetching>\r\nexport type followingProgressReturnType = ReturnType<typeof followingProgressAC>\r\n\r\ntype ActionUserType = followACReturnType | unFollowACReturnType | setUsersACReturnType |\r\n    setCurrentReturnType | setTotalUsersCountReturnType | toggleIsFetchingReturnType | followingProgressReturnType\r\n\r\n\r\nexport const requestUsersThunkCreator = (currentPage: number, pageSize: number) => {\r\n    return async (dispatch: any) => {\r\n        dispatch(toggleIsFetching(true))\r\n        dispatch(setCurrentPageAC(currentPage))\r\n        let data = await userAPI.getUsers(currentPage, pageSize)\r\n        dispatch(toggleIsFetching(false))\r\n        dispatch(setUsersAC(data.items))\r\n        dispatch(setTotalUsersCountAC(data.totalCount))\r\n    }\r\n}\r\n\r\nconst followUnfollowFlow = async (\r\n    dispatch: any,\r\n    userId: number,\r\n    apiMethod: (userId: number) => Promise<AxiosResponse<{ items: Array<UserType>, resultCode: number }>>,\r\n    actionCreator: (userId: number) => followACReturnType | unFollowACReturnType\r\n) => {\r\n    dispatch(followingProgressAC(true, userId))\r\n    let response = await apiMethod(userId)\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(actionCreator(userId))\r\n    }\r\n    dispatch(followingProgressAC(false, userId))\r\n}\r\n\r\nexport const followThunk = (userId: number) => {\r\n    return async (dispatch: any) => {\r\n        followUnfollowFlow(dispatch, userId, userAPI.follow.bind(userAPI), followAC)\r\n    }\r\n}\r\n\r\nexport const unFollowThunk = (userId: number) => {\r\n    return async (dispatch: any) => {\r\n        followUnfollowFlow(dispatch, userId, userAPI.unfollow.bind(userAPI), unFollowAC)\r\n    }\r\n}\r\n\r\nexport default usersReducer;","import axios, {AxiosResponse} from \"axios\";\r\nimport {UserType} from \"../redux/users-reducer\";\r\nimport {profilePhotoType, profileStatusType, UserProfileType} from \"../redux/profile-reducer\";\r\nimport {AuthType} from \"../redux/auth-reducer\";\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    headers: {\"API-KEY\": \"089d3e24-70d2-4632-9ce2-42855d61866e\"},\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/'\r\n})\r\n\r\nexport const userAPI = {\r\n    getUsers: (currentPage: number, pageSize: number) => {\r\n        return instance.get<void, AxiosResponse<{ items: Array<UserType>, totalCount: number }>>(`users?page=${currentPage}&count=${pageSize}`)\r\n            .then(response => response.data)\r\n    },\r\n    follow (userId: number) {\r\n        return instance.post<void, AxiosResponse<{ items: Array<UserType>, resultCode: number }>>(`follow/${userId}`)\r\n    },\r\n    unfollow (userId: number) {\r\n       return instance.delete<void, AxiosResponse<{ items: Array<UserType>, resultCode: number }>>(`follow/${userId}`)\r\n        },\r\n    getProfile: (userId: string) => {\r\n        return profileAPI.getProfile(userId)\r\n        // return instance.get<void, AxiosResponse<UserProfileType>>(`profile/` + userId)\r\n            }\r\n    }\r\n\r\nexport const profileAPI = {\r\n    getProfile: (userId: string) => {\r\n        return instance.get<void, AxiosResponse<UserProfileType>>(`profile/` + userId)\r\n    },\r\n\r\n    getStatus: (userId: string) => {\r\n        return instance.get<void, AxiosResponse<string>>(`profile/status/` + userId)\r\n    },\r\n\r\n    updateStatus: (newStatus: string) => {\r\n        return instance.put<void, AxiosResponse<profileStatusType>>(`profile/status`, {status: newStatus})\r\n    },\r\n    updatePhoto: (photo: File) => {\r\n        let formData = new FormData()\r\n        formData.append('image', photo)\r\n\r\n        return instance.put<void, AxiosResponse<profilePhotoType>>(`profile/photo`, formData, {headers: {\r\n            'Content-Type': 'multipart/form-data'\r\n        }})\r\n    },\r\n    updateMyProfile: (profileData: any) => {\r\n      return instance.put<void, AxiosResponse<profileStatusType>>(`profile/`, profileData)\r\n    }\r\n}\r\n\r\nexport const authAPI = {\r\n   me() {\r\n       return instance.get<void, AxiosResponse<{ data: AuthType, resultCode: number }>>(`auth/me`)\r\n   },\r\n    login(email: string, password: string, rememberMe: boolean = false, captcha: string) {\r\n       return instance.post<void, AxiosResponse<{resultCode: number, messages: Array<string>, data: {userID: number}}>>(`auth/login`,\r\n           {email, password, rememberMe, captcha})\r\n    },\r\n    logout() {\r\n       return instance.delete<void, AxiosResponse<{resultCode: number, messages: Array<string>, data: object}>>(`auth/login`)\r\n    }\r\n}\r\n\r\ntype CaptchaResponse = {\r\n    url: string\r\n}\r\n\r\nexport const securityAPI = {\r\n    getCaptchaUrl () {\r\n        return instance.get<void, AxiosResponse<CaptchaResponse>>(`security/get-captcha-url`)\r\n    }\r\n}\r\n\r\n\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"NavBar_nav__1OIvM\",\"item\":\"NavBar_item__39xfh\",\"activeLink\":\"NavBar_activeLink__1f5bY\"};","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport classes from './NavBar.module.css';\r\n\r\nconst NavBar = () => {\r\n    return (\r\n        <nav className={classes.nav}>\r\n            <div className={classes.item}><NavLink to=\"/profile\" activeClassName={classes.activeLink}>ProfileD</NavLink></div>\r\n            <div className={classes.item}><NavLink to=\"/dialogs\" activeClassName={classes.activeLink}>MessagesD</NavLink></div>\r\n            <div className={classes.item}><NavLink to=\"/users\" activeClassName={classes.activeLink}>UsersD</NavLink></div>\r\n            <div className={classes.item}><NavLink to=\"/news\" activeClassName={classes.activeLink}>NewsD</NavLink></div>\r\n            <div className={`${classes.item} ${classes.active}`}><NavLink to=\"/music\" activeClassName={classes.activeLink}>MusicD</NavLink></div>\r\n            <div className={classes.item}><NavLink to=\"settings\" activeClassName={classes.activeLink}>SettingsD</NavLink></div>\r\n        </nav>\r\n    )\r\n}\r\nexport default NavBar;","import React from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\nimport classes from './Header.module.css';\r\nimport {HeaderPropsType} from \"./HeaderContainer\";\r\n\r\n\r\nconst Header = (props: HeaderPropsType) => {\r\n    return (\r\n        <header className={classes.header}>\r\n            <img src={'https://cdn6.f-cdn.com/contestentries/189230/14797445/55214b4cc2224_thumb900.jpg'}/>\r\n\r\n            <div className={classes.loginBlock}>\r\n                {\r\n                    props.isAuth\r\n                        ? <div>{props.login} - <button onClick={props.logoutTC}>LogOut</button></div>\r\n                        : <NavLink to={'/login'}>LogIN</NavLink>\r\n                }\r\n            </div>\r\n        </header>\r\n    )\r\n}\r\nexport default Header","import {authAPI, securityAPI} from \"../api/api\";\r\nimport {Dispatch} from \"redux\";\r\n\r\nexport type AuthType = {\r\n    id: string,\r\n    email: string | null,\r\n    login: string | null,\r\n    isAuth: boolean,\r\n    captcha: string | null\r\n    error: string | null\r\n    // isFetching: boolean\r\n}\r\n\r\nconst SET_USER_DATA = 'auth/SET_USER_DATA'\r\nconst GET_CAPTCHA_URL = 'auth/GET_CAPTCHA_URL'\r\nconst GET_AUTH_ERROR= 'auth/GET_AUTH_ERROR'\r\n\r\n\r\nlet initialState: AuthType = {\r\n    id: '20162',\r\n    email: null,\r\n    login: null,\r\n    isAuth: false,\r\n    captcha: null,\r\n    error: null\r\n}\r\n\r\nconst authReducer = (state: AuthType = initialState, action: ActionAuthType): AuthType => {\r\n    switch (action.type) {\r\n        case SET_USER_DATA:\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n            }\r\n        case GET_CAPTCHA_URL:\r\n            return {...state, captcha: action.payload.captchaURL}\r\n        case GET_AUTH_ERROR:\r\n            return {...state, error: action.payload.error}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setAuthUserData = (userID: string | null, email: string | null, login: string | null, isAuth: boolean) =>\r\n    ({type: SET_USER_DATA, payload: {userID, email, login, isAuth}} as const)\r\n\r\nexport const getCaptchaUrlAC = (captchaURL: string) => {\r\n    return ({type: GET_CAPTCHA_URL, payload: {captchaURL}} as const)\r\n}\r\n\r\nexport const getAuthErrorAC = (error: string | null) => {\r\n    return ({type: GET_AUTH_ERROR, payload: {error}} as const)\r\n}\r\n\r\n\r\nexport type setAuthUserDataACReturnType = ReturnType<typeof setAuthUserData>\r\nexport type getCaptchaUrlACReturnType = ReturnType<typeof getCaptchaUrlAC>\r\nexport type getAuthErrorACReturnType = ReturnType<typeof getAuthErrorAC>\r\n\r\ntype ActionAuthType = setAuthUserDataACReturnType | getCaptchaUrlACReturnType | getAuthErrorACReturnType\r\n\r\nexport const getAuthUserDataThunk = () => async (dispatch: Dispatch) => {\r\n    let response = await authAPI.me()\r\n    if (response.data.resultCode === 0) {\r\n        // деструктуризация\r\n        let {id, email, login} = response.data.data\r\n        dispatch(setAuthUserData(id, email, login, true))\r\n    }\r\n}\r\n\r\nexport const loginTC = (email: string, password: string, rememberMe: boolean, captcha: string) => async (dispatch: any) => {\r\n    let response = await authAPI.login(email, password, rememberMe, captcha)\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(getAuthUserDataThunk())\r\n    }  else {\r\n        if (response.data.resultCode === 10) {\r\n            dispatch(getCaptchaURLTC())\r\n        }\r\n        let message = response.data.messages.length > 0 ? response.data.messages[0] : 'Some error'\r\n        dispatch(getAuthErrorAC(message))\r\n    }\r\n}\r\n\r\nexport const getCaptchaURLTC = () => async (dispatch: any) => {\r\n    let response = await securityAPI.getCaptchaUrl()\r\n    let captchaURL = response.data.url\r\n    dispatch(getCaptchaUrlAC(captchaURL))\r\n}\r\n\r\nexport const logoutTC = () => async (dispatch: Dispatch) => {\r\n    let response = await authAPI.logout()\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(setAuthUserData(null, null, null, false))\r\n    }\r\n}\r\n\r\nexport default authReducer;","import React from 'react';\r\nimport Header from \"./Header\";\r\nimport {connect} from \"react-redux\";\r\nimport { logoutTC} from \"../../redux/auth-reducer\";\r\nimport {StateType} from \"../../redux/redux-store\";\r\n\r\n\r\nclass HeaderContainer extends React.Component<HeaderPropsType> {\r\n    // componentDidMount() {\r\n    //     this.props.getAuthUserDataWithThunk()\r\n    // }\r\n\r\n    render() {\r\n        return (\r\n            <Header\r\n                {...this.props}/>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: StateType): MapStatePropsReturnType => ({\r\n    isAuth: state.auth.isAuth,\r\n    login: state.auth.login\r\n})\r\ntype MapStatePropsReturnType = {\r\n    isAuth: boolean,\r\n    login: string | null\r\n}\r\n\r\ntype MapDispatchReturnType = {\r\n    // setAuthUserData: (userID: number | null, email: string | null, login: string | null) => void\r\n    // getAuthUserDataWithThunk: () => void\r\n    logoutTC: () => void\r\n}\r\n\r\nexport type HeaderPropsType = MapDispatchReturnType & MapStatePropsReturnType\r\n\r\nexport default connect(mapStateToProps, {\r\n    // setAuthUserData,\r\n    // getAuthUserDataWithThunk: getAuthUserDataThunk,\r\n    logoutTC\r\n})(HeaderContainer)","import {getAuthUserDataThunk} from \"./auth-reducer\";\r\n\r\ntype AppType = {\r\n    initialized: boolean\r\n}\r\n\r\nconst SET_INITIALIZED = 'app/SET_INITIALIZED'\r\n\r\n\r\nlet initialState: AppType = {\r\n    initialized: false\r\n}\r\n\r\nconst appReducer = (state: AppType = initialState, action: ActionAuthType): AppType => {\r\n    switch (action.type) {\r\n        case SET_INITIALIZED:\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setInitializedSuccess = () =>\r\n    ({type: SET_INITIALIZED } as const)\r\n\r\n\r\nexport type setInitializedSuccessACReturnType = ReturnType<typeof setInitializedSuccess>\r\n\r\nexport const initializeAppTC = () => (dispatch: any) => {\r\n   let promise = dispatch(getAuthUserDataThunk())\r\n    promise.then(()=> {\r\n        dispatch(setInitializedSuccess())\r\n    })\r\n}\r\n\r\ntype ActionAuthType = setInitializedSuccessACReturnType\r\n\r\nexport default appReducer;","import {useFormik} from \"formik\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {StateType} from \"../../redux/redux-store\";\r\nimport {loginTC} from \"../../redux/auth-reducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport React from \"react\";\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\nexport const LoginFormik = () => {\r\n\r\n    const isAuth = useSelector<StateType, boolean>(state => state.auth.isAuth)\r\n    const isAuthError = useSelector<StateType, null | string>(state => state.auth.error)\r\n    const captcha = useSelector<StateType, null | string>(state => state.auth.captcha)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false,\r\n            captcha: ''\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values.email, values.password, values.rememberMe, values.captcha))\r\n        },\r\n        validate: values => {\r\n            const errors: FormikErrorType = {}\r\n            if (!values.email) {\r\n                errors.email = 'Field Email is required'\r\n            } else {\r\n                return errors\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Field Password is required'\r\n            }\r\n            return errors\r\n        }\r\n    })\r\n\r\n    if (isAuth) {\r\n        return <Redirect to={'/profile'}/>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>Login</h1>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <div>\r\n                    <input name={'email'}\r\n                           onChange={formik.handleChange}\r\n                           value={formik.values.email}\r\n                           onBlur={formik.handleBlur}/>\r\n\r\n                    {formik.touched.email && formik.errors.email &&\r\n                    <div style={{color: 'red'}}>{formik.errors.email}</div>}\r\n                </div>\r\n                <div>\r\n                    <input type={'password'}\r\n                           name={'password'}\r\n                           onChange={formik.handleChange}\r\n                           value={formik.values.password}\r\n                           onBlur={formik.handleBlur}/>\r\n                    {formik.touched.password && formik.errors.password &&\r\n                    <div style={{color: 'red'}}>{formik.errors.password}</div>}\r\n                </div>\r\n                <div> Remember Me\r\n                    <input type={'checkbox'}\r\n                           name={'rememberMe'}\r\n                           onChange={formik.handleChange}\r\n                           checked={formik.values.rememberMe}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    {captcha && <div>\r\n                        <img src={captcha}/>\r\n                        <p><input name={'captcha'}\r\n                                  onChange={formik.handleChange}\r\n                                  value={formik.values.captcha}/></p>\r\n                    </div>}\r\n                </div>\r\n\r\n                <button>Login</button>\r\n            </form>\r\n            {isAuthError && <div style={{color: 'red'}}>{isAuthError}</div>}\r\n        </div>\r\n    )\r\n\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport NavBar from \"./components/NavBar/NavBar\";\r\nimport {BrowserRouter, HashRouter, Route} from 'react-router-dom';\r\nimport HeaderContainer from \"./components/Header/HeaderContainer\";\r\nimport {connect} from \"react-redux\";\r\nimport {initializeAppTC} from \"./redux/app-reducer\";\r\nimport {StateType} from \"./redux/redux-store\";\r\nimport {Preloader} from \"./components/common/Preloader/Preloader\";\r\nimport {LoginFormik} from \"./components/Login/LoginFormik\";\r\n\r\nconst DialogsContainer = React.lazy(()=> import(\"./components/Dialogs/DialogsContainer\"))\r\nconst ProfileContainer = React.lazy(()=> import(\"./components/Profile/ProfileContainer\"))\r\nconst UsersContainer = React.lazy(()=> import(\"./components/Users/UsersContainer\"))\r\n\r\nclass App extends React.Component <AppPropsType>{\r\n    componentDidMount() {\r\n        this.props.initializeAppWithThunk()\r\n    }\r\n\r\n    render () {\r\n        if (!this.props.initialized) {\r\n            return <Preloader/>\r\n        }\r\n        return (\r\n            <HashRouter>\r\n                <div className={'app-wraper'}>\r\n                    <HeaderContainer/>\r\n                    <NavBar/>\r\n                    <div className={'app-wraper-content'}>\r\n                        <Route path='/profile/:userId?' render={() => <ProfileContainer/>}/>\r\n                        <Route path='/dialogs' render={() => <DialogsContainer\r\n                        />}/>\r\n                        <Route path='/users' render={() => <UsersContainer/>}/>\r\n                        <Route path='/login' render={() => <LoginFormik/>}/>\r\n\r\n                        {/*<Route path='/news' component={News}/>*/}\r\n                        {/*<Route path='/music' component={Music}/>*/}\r\n                        {/*<Route path='/settings' component={Settings}/>*/}\r\n\r\n                    </div>\r\n                </div>\r\n            </HashRouter>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: StateType) : MapStateReturnType => ({\r\n    initialized: state.app.initialized\r\n})\r\n\r\nexport default connect(mapStateToProps, {\r\n    initializeAppWithThunk: initializeAppTC,\r\n})\r\n(App)\r\n\r\ntype MapDispatchReturnType = { initializeAppWithThunk: () => void }\r\n\r\ntype MapStateReturnType = { initialized: boolean }\r\n\r\ntype AppPropsType = MapDispatchReturnType & MapStateReturnType","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import {applyMiddleware, combineReducers, compose, createStore} from \"redux\";\r\nimport profileReducer from \"./profile-reducer\";\r\nimport dialogReducer from \"./dialog-reducer\";\r\nimport usersReducer from \"./users-reducer\";\r\nimport authReducer from \"./auth-reducer\";\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport appReducer from \"./app-reducer\";\r\n\r\nlet reducers = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    app: appReducer,\r\n    // form: formReducer\r\n    // sidebar: sidebarReducer\r\n});\r\n\r\nexport type StateType = ReturnType<typeof reducers>\r\nexport type StoreType = typeof store\r\n\r\n// let store = createStore(reducers, applyMiddleware(thunkMiddleware));\r\n\r\n// @ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(reducers, composeEnhancers(applyMiddleware(thunkMiddleware)\r\n));\r\n\r\n// @ts-ignore\r\nwindow.store = store\r\n\r\nexport default store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport store from './redux/redux-store'\r\nimport {Provider} from \"react-redux\";\r\nimport {BrowserRouter, HashRouter} from \"react-router-dom\";\r\nimport {Preloader} from \"./components/common/Preloader/Preloader\";\r\n\r\nconst renderEntireTree = () => {\r\n    ReactDOM.render(\r\n        <HashRouter>\r\n            <Provider store={store}>\r\n                <React.Suspense fallback={<Preloader/>}> <App/></React.Suspense>\r\n            </Provider>\r\n        </HashRouter>,\r\n        document.getElementById('root')\r\n    );\r\n}\r\n\r\nrenderEntireTree ()\r\n\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}