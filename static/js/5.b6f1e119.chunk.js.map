{"version":3,"sources":["components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx","components/Dialogs/Dialogs.module.css","utils/validators.ts","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","hoc/withAuthRedirect.tsx"],"names":["DialogItem","props","className","classes","dialogName","active","src","ava","to","id","name","Message","dialogMessage","message","AddMessageFormik","maxLengthCreator","dispatch","useDispatch","formik","useFormik","initialValues","newMessageBody","onSubmit","values","sendMessageCreator","resetForm","handleSubmit","onChange","handleChange","value","Dialogs","state","dialogsPage","dialogsElements","dialogNames","map","dN","messagesElements","dialogMessages","dM","dialogs","dialogsNames","dialogsMessages","compose","connect","sendMessage","body","withAuthRedirect","module","exports","maxLength","length","_objectWithoutProperties","source","excluded","key","i","target","sourceKeys","Object","keys","indexOf","getOwnPropertySymbols","sourceSymbolKeys","prototype","propertyIsEnumerable","call","mapStateToProps","isAuth","auth","Component","restProps"],"mappings":"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","file":"static/js/5.b6f1e119.chunk.js","sourcesContent":["import React from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\nimport classes from './../Dialogs.module.css'\r\nimport {dialogNameType} from \"../../../redux/dialog-reducer\";\r\n\r\n\r\n\r\n\r\nconst DialogItem = (props: dialogNameType) => {\r\n    return (\r\n        <div className={`${classes.dialogName} ${classes.active}`}>\r\n            <img src={props.ava}/>\r\n            <NavLink to={\"/dialogs/\" + props.id}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DialogItem;","import React from 'react';\r\nimport classes from './../Dialogs.module.css'\r\n\r\n\r\ntype messagePropsType = {\r\n    id: number\r\n    message: string\r\n    // dispatch?: (action: ActionType) => void\r\n}\r\n\r\n\r\nconst Message = (props: messagePropsType) => {\r\n\r\n    return (\r\n        <div className={classes.dialogMessage}>\r\n            {props.message}\r\n\r\n        </div>\r\n        // <div>\r\n        //     <textarea ref={sendMessage}></textarea>\r\n        //     <button onClick={sendNewMessage}>send</button>\r\n        // </div>\r\n    )\r\n}\r\n\r\nexport default Message;","import React from 'react';\r\nimport classes from './Dialogs.module.css'\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport {DialPropsType} from \"./DialogsContainer\";\r\nimport {dialogsPageType, sendMessageCreator} from \"../../redux/dialog-reducer\";\r\nimport {Textarea} from \"../common/FormsControls/FormsConrols\";\r\nimport {maxLengthCreator, required} from \"../../utils/validators\";\r\nimport {useFormik} from 'formik';\r\nimport { useDispatch } from 'react-redux';\r\n\r\ntype dialogsProps = {\r\n    sendMessage: (body: string) => void\r\n    dialogsPage: dialogsPageType\r\n}\r\n\r\nconst Dialogs = (props: DialPropsType) => {\r\n    let state = props.dialogsPage\r\n\r\n    let dialogsElements = state.dialogNames.map(dN => <DialogItem name={dN.name} id={dN.id} ava={dN.ava} key={dN.id}/>)\r\n    let messagesElements = state.dialogMessages.map(dM => <Message id={dM.id}\r\n                                                                   message={dM.message}\r\n                                                                   key={dM.id}\r\n    />)\r\n\r\n    let addNewMessage = (values: any) => {\r\n        props.sendMessage(values.newMessageBody)\r\n    }\r\n\r\n    return (\r\n        <div className={classes.dialogs}>\r\n            <div className={classes.dialogsNames}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={classes.dialogsMessages}>\r\n                <div>{messagesElements}</div>\r\n                <AddMessageFormik/>\r\n\r\n            </div>\r\n            this page must be do\r\n        </div>\r\n    )\r\n}\r\n\r\ntype MyMessageFormDataType = {\r\n    newMessageBody: string\r\n}\r\n\r\nlet maxLength50 = maxLengthCreator(50)\r\n\r\nexport const AddMessageFormik = () => {\r\n    const dispatch = useDispatch()\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            newMessageBody: ''\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(sendMessageCreator(values.newMessageBody))\r\n            formik.resetForm()\r\n        }\r\n    })\r\n\r\n    return (\r\n        <form onSubmit={formik.handleSubmit}>\r\n            <textarea\r\n                name={'newMessageBody'}\r\n                onChange={formik.handleChange}\r\n                value={formik.values.newMessageBody}\r\n            />\r\n            <button>Send Message</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default Dialogs;","import React from 'react';\r\nimport {dialogsPageType, sendMessageCreator} from \"../../redux/dialog-reducer\";\r\nimport {StateType} from \"../../redux/redux-store\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {compose, Dispatch} from \"redux\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\n\r\ntype MapStatePropsReturnType = {\r\n    dialogsPage: dialogsPageType\r\n    // isAuth: boolean\r\n}\r\n\r\nlet mapStateToProps = (state: StateType): MapStatePropsReturnType => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n        // isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\ntype MapDispatchReturnType = {\r\n    // updateNewMessageBody: (body: string) => void\r\n    sendMessage: (body: string) => void\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch) : MapDispatchReturnType => {\r\n    return {\r\n        // updateNewMessageBody: (body: string) => dispatch(updateNewMessageBodyCreator(body)),\r\n        sendMessage: (body: string) => dispatch(sendMessageCreator(body))\r\n    }\r\n}\r\n\r\nexport type DialPropsType = MapStatePropsReturnType & MapDispatchReturnType\r\n\r\n\r\n\r\n// let AuthRedirectComponent = withAuthRedirect(Dialogs)\r\n\r\n\r\n// const DialogsContainer = connect(mapStateToProps, mapDispatchToProps)(AuthRedirectComponent);\r\n\r\n// export default DialogsContainer;\r\n\r\nexport default compose <React.ComponentType> (\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs)","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__ZYXYm\",\"dialogsNames\":\"Dialogs_dialogsNames__1OXU0\",\"active\":\"Dialogs_active__2Fick\",\"dialogName\":\"Dialogs_dialogName__YCarq\",\"dialogsMessages\":\"Dialogs_dialogsMessages__2bi6o\",\"dialogMessage\":\"Dialogs_dialogMessage__XOTbf\"};","export const required = (value: string) => {\r\n    if (value) {\r\n        return undefined\r\n    } else {\r\n        return 'Field is empty'\r\n    }\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength: number) => (value: string) => {\r\n    if (value.length > maxLength) {\r\n        return `Max length is ${maxLength} symbols`\r\n    } else {\r\n        return undefined\r\n    }\r\n}","import objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","import React, {ComponentType} from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {StateType} from \"../redux/redux-store\";\r\n\r\ntype MapStatePropsType = { isAuth: boolean }\r\n\r\nconst mapStateToProps = (state: StateType): MapStatePropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport function withAuthRedirect  <T>(Component: ComponentType<T>) {\r\n    const RedirectComponent = (props: MapStatePropsType) => {\r\n        // деструктуризация пропсов:\r\n        let {isAuth, ...restProps} = props\r\n\r\n        if (!isAuth) return <Redirect to={'/login'}/>\r\n        return <Component {...restProps as T}/>\r\n    }\r\n    let ConnectedRedirectComponent = connect(mapStateToProps)(RedirectComponent)\r\n\r\n    return ConnectedRedirectComponent\r\n}"],"sourceRoot":""}