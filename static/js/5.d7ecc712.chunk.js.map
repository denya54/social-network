{"version":3,"sources":["components/Dialogs/Dialogs.module.css","hoc/withAuthRedirect.tsx","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["module","exports","mapStateToProps","state","isAuth","auth","withAuthRedirect","Component","connect","props","restProps","to","DialogItem","className","classes","dialogName","active","src","ava","id","name","Message","dialogMessage","message","maxLength50","maxLengthCreator","AddMessageReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","placeholder","validate","required","Dialogs","dialogsPage","dialogsElements","dialogNames","map","dN","messagesElements","dialogMessages","dM","dialogs","dialogsNames","dialogsMessages","values","sendMessage","newMessageBody","compose","dispatch","body","sendMessageCreator"],"mappings":"2GACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,WAAa,4BAA4B,gBAAkB,iCAAiC,cAAgB,iC,oHCMzOC,EAAkB,SAACC,GACrB,MAAO,CACHC,OAAQD,EAAME,KAAKD,SAIpB,SAASE,EAAsBC,GAUlC,OAFiCC,YAAQN,EAARM,EAPP,SAACC,GAA6B,IAE/CL,EAAwBK,EAAxBL,OAAWM,EAFoC,YAEvBD,EAFuB,YAIpD,OAAKL,EACE,cAACG,EAAD,eAAeG,IADF,cAAC,IAAD,CAAUC,GAAI,gB,6FCD3BC,EATI,SAACH,GAChB,OACI,sBAAKI,UAAS,UAAKC,IAAQC,WAAb,YAA2BD,IAAQE,QAAjD,UACI,qBAAKC,IAAKR,EAAMS,MAChB,cAAC,IAAD,CAASP,GAAI,YAAcF,EAAMU,GAAjC,SAAsCV,EAAMW,WCazCC,EAdC,SAACZ,GAEb,OACI,qBAAKI,UAAWC,IAAQQ,cAAxB,SACKb,EAAMc,W,kCCkCfC,EAAcC,YAAiB,IAuB7BC,EAAsBC,YAAiC,CAACC,KAAM,wBAAxCD,EArBsD,SAAClB,GAC/E,OACI,uBAAMoB,SAAUpB,EAAMqB,aAAtB,UACI,8BACI,cAACC,EAAA,EAAD,CAAOC,UAAWC,IACXb,KAAM,iBACNc,YAAa,qBACbC,SAAU,CAACC,IAAUZ,OAIhC,8BACI,kDAWDa,EAxDC,SAAC5B,GACb,IAAIN,EAAQM,EAAM6B,YAEdC,EAAkBpC,EAAMqC,YAAYC,KAAI,SAAAC,GAAE,OAAI,cAAC,EAAD,CAAYtB,KAAMsB,EAAGtB,KAAMD,GAAIuB,EAAGvB,GAAID,IAAKwB,EAAGxB,KAAUwB,EAAGvB,OACzGwB,EAAmBxC,EAAMyC,eAAeH,KAAI,SAAAI,GAAE,OAAI,cAAC,EAAD,CAAS1B,GAAI0B,EAAG1B,GACPI,QAASsB,EAAGtB,SACPsB,EAAG1B,OAOvE,OACI,sBAAKN,UAAWC,IAAQgC,QAAxB,UACI,qBAAKjC,UAAWC,IAAQiC,aAAxB,SACKR,IAEL,sBAAK1B,UAAWC,IAAQkC,gBAAxB,UACI,8BAAML,IAEN,cAACjB,EAAD,CAAqBG,SAZb,SAACoB,GACjBxC,EAAMyC,YAAYD,EAAOE,0B,yBCelBC,sBACX5C,aA/BkB,SAACL,GACnB,MAAO,CACHmC,YAAanC,EAAMmC,gBAUF,SAACe,GACtB,MAAO,CAEHH,YAAa,SAACI,GAAD,OAAkBD,EAASE,YAAmBD,SAiB/DhD,IAFW8C,CAGbf","file":"static/js/5.d7ecc712.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__ZYXYm\",\"dialogsNames\":\"Dialogs_dialogsNames__1OXU0\",\"active\":\"Dialogs_active__2Fick\",\"dialogName\":\"Dialogs_dialogName__YCarq\",\"dialogsMessages\":\"Dialogs_dialogsMessages__2bi6o\",\"dialogMessage\":\"Dialogs_dialogMessage__XOTbf\"};","import React, {ComponentType} from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {StateType} from \"../redux/redux-store\";\r\n\r\ntype MapStatePropsType = { isAuth: boolean }\r\n\r\nconst mapStateToProps = (state: StateType): MapStatePropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport function withAuthRedirect  <T>(Component: ComponentType<T>) {\r\n    const RedirectComponent = (props: MapStatePropsType) => {\r\n        // деструктуризация пропсов:\r\n        let {isAuth, ...restProps} = props\r\n\r\n        if (!isAuth) return <Redirect to={'/login'}/>\r\n        return <Component {...restProps as T}/>\r\n    }\r\n    let ConnectedRedirectComponent = connect(mapStateToProps)(RedirectComponent)\r\n\r\n    return ConnectedRedirectComponent\r\n}","import React from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\nimport classes from './../Dialogs.module.css'\r\nimport {dialogNameType} from \"../../../redux/dialog-reducer\";\r\n\r\n\r\n\r\n\r\nconst DialogItem = (props: dialogNameType) => {\r\n    return (\r\n        <div className={`${classes.dialogName} ${classes.active}`}>\r\n            <img src={props.ava}/>\r\n            <NavLink to={\"/dialogs/\" + props.id}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DialogItem;","import React from 'react';\r\nimport classes from './../Dialogs.module.css'\r\n\r\n\r\ntype messagePropsType = {\r\n    id: number\r\n    message: string\r\n    // dispatch?: (action: ActionType) => void\r\n}\r\n\r\n\r\nconst Message = (props: messagePropsType) => {\r\n\r\n    return (\r\n        <div className={classes.dialogMessage}>\r\n            {props.message}\r\n\r\n        </div>\r\n        // <div>\r\n        //     <textarea ref={sendMessage}></textarea>\r\n        //     <button onClick={sendNewMessage}>send</button>\r\n        // </div>\r\n    )\r\n}\r\n\r\nexport default Message;","import React from 'react';\r\nimport classes from './Dialogs.module.css'\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport {DialPropsType} from \"./DialogsContainer\";\r\nimport {dialogsPageType} from \"../../redux/dialog-reducer\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../common/FormsControls/FormsConrols\";\r\nimport {maxLengthCreator, required} from \"../../utils/validators\";\r\n\r\ntype dialogsProps = {\r\n    // updateNewMessageBody: (body: string) => void\r\n    sendMessage: (body: string) => void\r\n    dialogsPage: dialogsPageType\r\n    // dispatch: (action: ActionType) => void\r\n    // store: StoreType\r\n}\r\n\r\nconst Dialogs = (props: DialPropsType) => {\r\n    let state = props.dialogsPage\r\n\r\n    let dialogsElements = state.dialogNames.map(dN => <DialogItem name={dN.name} id={dN.id} ava={dN.ava} key={dN.id}/>)\r\n    let messagesElements = state.dialogMessages.map(dM => <Message id={dM.id}\r\n                                                                   message={dM.message}\r\n                                                                   key={dM.id}\r\n    />)\r\n\r\n    let addNewMessage = (values: any) => {\r\n        props.sendMessage(values.newMessageBody)\r\n    }\r\n\r\n    return (\r\n        <div className={classes.dialogs}>\r\n            <div className={classes.dialogsNames}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={classes.dialogsMessages}>\r\n                <div>{messagesElements}</div>\r\n\r\n                <AddMessageReduxForm onSubmit={addNewMessage}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype MyMessageFormDataType = {\r\n    newMessageBody: string\r\n}\r\n\r\nlet maxLength50 = maxLengthCreator(50)\r\n\r\nexport const AddMessageForm: React.FC<InjectedFormProps<MyMessageFormDataType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea}\r\n                       name={'newMessageBody'}\r\n                       placeholder={'enter your message'}\r\n                       validate={[required, maxLength50]}/>\r\n                {/*<textarea value={newMessageBody} onChange={onNewMessageChange}*/}\r\n                {/*          placeholder={'Write your message'}></textarea>*/}\r\n            </div>\r\n            <div>\r\n                <button\r\n                    // onClick={onSendMessageClick}\r\n                >SEND\r\n                </button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddMessageReduxForm = reduxForm<MyMessageFormDataType>({form: 'dialogAddMessageForm'})(AddMessageForm)\r\n\r\nexport default Dialogs;","import React from 'react';\r\nimport {dialogsPageType, sendMessageCreator} from \"../../redux/dialog-reducer\";\r\nimport {StateType} from \"../../redux/redux-store\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {compose, Dispatch} from \"redux\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\n\r\ntype MapStatePropsReturnType = {\r\n    dialogsPage: dialogsPageType\r\n    // isAuth: boolean\r\n}\r\n\r\nlet mapStateToProps = (state: StateType): MapStatePropsReturnType => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n        // isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\ntype MapDispatchReturnType = {\r\n    // updateNewMessageBody: (body: string) => void\r\n    sendMessage: (body: string) => void\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch) : MapDispatchReturnType => {\r\n    return {\r\n        // updateNewMessageBody: (body: string) => dispatch(updateNewMessageBodyCreator(body)),\r\n        sendMessage: (body: string) => dispatch(sendMessageCreator(body))\r\n    }\r\n}\r\n\r\nexport type DialPropsType = MapStatePropsReturnType & MapDispatchReturnType\r\n\r\n\r\n\r\n// let AuthRedirectComponent = withAuthRedirect(Dialogs)\r\n\r\n\r\n// const DialogsContainer = connect(mapStateToProps, mapDispatchToProps)(AuthRedirectComponent);\r\n\r\n// export default DialogsContainer;\r\n\r\nexport default compose <React.ComponentType> (\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs)"],"sourceRoot":""}