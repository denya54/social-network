{"version":3,"sources":["components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/DialogsWithoutContainer.tsx","components/Dialogs/Dialogs.module.css","utils/validators.ts"],"names":["DialogItem","props","className","classes","dialogName","active","src","ava","to","id","name","Message","dialogMessage","message","AddMessageFormik","maxLengthCreator","dispatch","useDispatch","formik","useFormik","initialValues","newMessageBody","onSubmit","values","sendMessageCreator","resetForm","handleSubmit","textarea","onChange","handleChange","value","button","DialogsWithoutContainer","state","useSelector","st","dialogsPage","dialogsElements","dialogNames","map","dN","messagesElements","dialogMessages","dM","dialogs","dialogsNames","dialogsMessages","module","exports","maxLength","length"],"mappings":"yOAiBeA,EATI,SAACC,GAChB,OACI,sBAAKC,UAAS,UAAKC,IAAQC,WAAb,YAA2BD,IAAQE,QAAjD,UACI,qBAAKC,IAAKL,EAAMM,MAChB,cAAC,IAAD,CAASC,GAAI,YAAcP,EAAMQ,GAAjC,SAAsCR,EAAMS,WCazCC,EAdC,SAACV,GAEb,OACI,qBAAKC,UAAWC,IAAQS,cAAxB,SACKX,EAAMY,W,gBC0BNC,GAFKC,YAAiB,IAEH,WAC5B,IAAMC,EAAWC,cAEXC,EAASC,YAAU,CACrBC,cAAe,CACXC,eAAgB,IAEpBC,SAAU,SAAAC,GACNP,EAASQ,YAAmBD,EAAOF,iBACnCH,EAAOO,eAIf,OACI,uBAAMH,SAAUJ,EAAOQ,aAAvB,UACI,0BACIxB,UAAWC,IAAQwB,SACnBjB,KAAM,iBACNkB,SAAUV,EAAOW,aACjBC,MAAOZ,EAAOK,OAAOF,iBAEzB,wBAAQnB,UAAWC,IAAQ4B,OAA3B,+BAKGC,UAzDiB,WAE5B,IAAIC,EAAQC,aAAwC,SAAAC,GAAE,OAAIA,EAAGC,eAEzDC,EAAkBJ,EAAMK,YAAYC,KAAI,SAAAC,GAAE,OAAI,cAAC,EAAD,CAAY9B,KAAM8B,EAAG9B,KAAMD,GAAI+B,EAAG/B,GAAIF,IAAKiC,EAAGjC,KAAUiC,EAAG/B,OACzGgC,EAAmBR,EAAMS,eAAeH,KAAI,SAAAI,GAAE,OAAI,cAAC,EAAD,CAASlC,GAAIkC,EAAGlC,GACPI,QAAS8B,EAAG9B,SACP8B,EAAGlC,OAGvE,OACI,sBAAKP,UAAWC,IAAQyC,QAAxB,UACI,qBAAK1C,UAAWC,IAAQ0C,aAAxB,SACKR,IAEL,sBAAKnC,UAAWC,IAAQ2C,gBAAxB,UACI,8BAAML,IACN,cAAC,EAAD,OANR,4B,mBCpBRM,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,WAAa,4BAA4B,gBAAkB,iCAAiC,cAAgB,+BAA+B,SAAW,0BAA0B,OAAS,0B,gCCD5T,kCAAO,IAQMjC,EAAmB,SAACkC,GAAD,OAAuB,SAACnB,GACpD,OAAIA,EAAMoB,OAASD,EACT,iBAAN,OAAwBA,EAAxB,iBAEA","file":"static/js/5.a41ba144.chunk.js","sourcesContent":["import React from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\nimport classes from './../Dialogs.module.css'\r\nimport {dialogNameType} from \"../../../redux/dialog-reducer\";\r\n\r\n\r\n\r\n\r\nconst DialogItem = (props: dialogNameType) => {\r\n    return (\r\n        <div className={`${classes.dialogName} ${classes.active}`}>\r\n            <img src={props.ava}/>\r\n            <NavLink to={\"/dialogs/\" + props.id}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DialogItem;","import React from 'react';\r\nimport classes from './../Dialogs.module.css'\r\n\r\n\r\ntype messagePropsType = {\r\n    id: number\r\n    message: string\r\n    // dispatch?: (action: ActionType) => void\r\n}\r\n\r\n\r\nconst Message = (props: messagePropsType) => {\r\n\r\n    return (\r\n        <div className={classes.dialogMessage}>\r\n            {props.message}\r\n\r\n        </div>\r\n        // <div>\r\n        //     <textarea ref={sendMessage}></textarea>\r\n        //     <button onClick={sendNewMessage}>send</button>\r\n        // </div>\r\n    )\r\n}\r\n\r\nexport default Message;","import React from 'react';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {dialogsPageType, sendMessageCreator} from '../../redux/dialog-reducer';\r\nimport {StateType} from '../../redux/redux-store';\r\nimport DialogItem from './DialogItem/DialogItem';\r\nimport Message from './Message/Message';\r\nimport classes from './Dialogs.module.css'\r\nimport {maxLengthCreator} from \"../../utils/validators\";\r\nimport {useFormik} from 'formik';\r\n\r\nconst DialogsWithoutContainer = () => {\r\n\r\n    let state = useSelector<StateType, dialogsPageType>(st => st.dialogsPage)\r\n\r\n    let dialogsElements = state.dialogNames.map(dN => <DialogItem name={dN.name} id={dN.id} ava={dN.ava} key={dN.id}/>)\r\n    let messagesElements = state.dialogMessages.map(dM => <Message id={dM.id}\r\n                                                                   message={dM.message}\r\n                                                                   key={dM.id}\r\n    />)\r\n\r\n    return (\r\n        <div className={classes.dialogs}>\r\n            <div className={classes.dialogsNames}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={classes.dialogsMessages}>\r\n                <div>{messagesElements}</div>\r\n                <AddMessageFormik/>\r\n\r\n            </div>\r\n            this page must be do\r\n        </div>\r\n    )\r\n}\r\n\r\ntype MyMessageFormDataType = {\r\n    newMessageBody: string\r\n}\r\n\r\nlet maxLength50 = maxLengthCreator(50)\r\n\r\nexport const AddMessageFormik = () => {\r\n    const dispatch = useDispatch()\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            newMessageBody: ''\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(sendMessageCreator(values.newMessageBody))\r\n            formik.resetForm()\r\n        }\r\n    })\r\n\r\n    return (\r\n        <form onSubmit={formik.handleSubmit}>\r\n            <textarea\r\n                className={classes.textarea}\r\n                name={'newMessageBody'}\r\n                onChange={formik.handleChange}\r\n                value={formik.values.newMessageBody}\r\n            />\r\n            <button className={classes.button}>Send Message</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default DialogsWithoutContainer;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__ZYXYm\",\"dialogsNames\":\"Dialogs_dialogsNames__1OXU0\",\"active\":\"Dialogs_active__2Fick\",\"dialogName\":\"Dialogs_dialogName__YCarq\",\"dialogsMessages\":\"Dialogs_dialogsMessages__2bi6o\",\"dialogMessage\":\"Dialogs_dialogMessage__XOTbf\",\"textarea\":\"Dialogs_textarea__p-BBI\",\"button\":\"Dialogs_button__1Tt1Z\"};","export const required = (value: string) => {\r\n    if (value) {\r\n        return undefined\r\n    } else {\r\n        return 'Field is empty'\r\n    }\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength: number) => (value: string) => {\r\n    if (value.length > maxLength) {\r\n        return `Max length is ${maxLength} symbols`\r\n    } else {\r\n        return undefined\r\n    }\r\n}"],"sourceRoot":""}