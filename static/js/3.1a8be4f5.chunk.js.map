{"version":3,"sources":["components/Profile/ProfileInfo/ProfileStatus.tsx","assets/images/nophotoava.png","components/Profile/ProfileInfo/Contacts.tsx","components/Profile/ProfileInfo/ProfileDescriptionEditForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post1/Post.tsx","components/Profile/MyPosts/MyPost.tsx","components/Profile/MyPosts/MyPostContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","utils/validators.ts","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","hoc/withAuthRedirect.tsx","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/ProfileInfo/Contacts.module.css","components/Profile/MyPosts/MyPost.module.css","components/Profile/MyPosts/Post1/Post.module.css"],"names":["ProfileStatus","props","useEffect","setStatus","status","useState","editMode","setEditMode","value","onChange","e","currentTarget","changeStatus","onBlur","updateStatus","autoFocus","onDoubleClick","Contacts","className","classes","contacts","contactTitle","contactValue","ContactsEditForm","inputValue","setInputValue","ProfileDescriptionEditForm","profile","fullName","nameField","setNameField","aboutMe","aboutMeField","setAboutMeField","lookingForAJob","lookingForAJobField","setLookingForAJobField","lookingForAJobDescription","mySkillsField","setMySkillsField","type","checked","Object","keys","map","key","onClick","profileData","setProfileData","changeEditMode","ProfileInfo","Preloader","descriptionBlock","photos","large","picture","src","mainPhoto","isOwner","target","files","savePhoto","ProfileDescription","Post","item","message","likesCount","MyPost","React","memo","dispatch","useDispatch","formik","useFormik","initialValues","newPostText","onSubmit","values","addPostActionCreator","resetForm","validate","errors","postsElement","statePosts","post","id","postsBlock","handleSubmit","name","handleChange","handleBlur","style","color","posts","maxLengthCreator","MyPostContainer","connect","state","profilePage","addPost","text","Profile","setPhoto","ProfileContainer","userId","this","match","params","authorisedUserID","history","push","getUserProfileWithThunk","getStatusWithThunk","refreshProfile","prevProps","prevState","snapshot","updateStatusWithThunk","updatePhotoWithThunk","updateProfileWithThunk","Component","compose","auth","isAuth","getUserProfileThunk","getStatusThunk","updateStatusThunk","updatePhotoThunk","updateProfileThunk","withRouter","withAuthRedirect","_slicedToArray","arr","i","Array","isArray","Symbol","iterator","_arr","_n","_d","_e","undefined","_s","_i","next","done","length","err","unsupportedIterableToArray","TypeError","maxLength","_objectWithoutProperties","source","excluded","sourceKeys","indexOf","getOwnPropertySymbols","sourceSymbolKeys","prototype","propertyIsEnumerable","call","mapStateToProps","restProps","to","module","exports"],"mappings":"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","file":"static/js/3.1a8be4f5.chunk.js","sourcesContent":["import React, {ChangeEvent, useEffect, useState} from 'react';\r\n\r\ntype ProfileStatusPropsType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nconst ProfileStatus = (props: ProfileStatusPropsType) => {\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    },[props.status])\r\n\r\n    const [status, setStatus] = useState(props.status)\r\n\r\n    let changeStatus = (e: ChangeEvent<HTMLInputElement>) => setStatus(e.currentTarget.value)\r\n\r\n    const [editMode, setEditMode] = useState(false)\r\n\r\n    const deActivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(status)\r\n    }\r\n\r\n    const activateEditMode = () => setEditMode(true)\r\n\r\n    return (\r\n        <div>\r\n            {editMode\r\n                ? <div><input value={status}\r\n                              onChange={(e) => changeStatus(e)}\r\n                              onBlur={deActivateEditMode}\r\n                              autoFocus/>\r\n                </div>\r\n                : <div>status: <span onDoubleClick={activateEditMode}>{status || 'No status'}</span></div>\r\n            }\r\n        </div>)\r\n}\r\nexport default ProfileStatus;","export default __webpack_public_path__ + \"static/media/nophotoava.1845a328.png\";","import React, {ChangeEvent, useState} from \"react\";\r\nimport classes from './Contacts.module.css';\r\n\r\ntype ContactsPropsType = {\r\n    contactTitle: string\r\n    contactValue: string\r\n}\r\n\r\nexport const Contacts = (props: ContactsPropsType) => {\r\n    return (\r\n        <div className={classes.contacts}>\r\n            {props.contactTitle}: {props.contactValue}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const ContactsEditForm = (props: ContactsPropsType) => {\r\n\r\n    let [inputValue, setInputValue] = useState(props.contactValue)\r\n    let changeInput = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setInputValue(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n\r\n        <div className={classes.contacts}>\r\n            {props.contactTitle}: <input value={inputValue} onChange={changeInput}/>\r\n        </div>\r\n    )\r\n}","import {ProfileDataType, UserProfileType} from \"../../../redux/profile-reducer\";\r\nimport {Contacts, ContactsEditForm} from \"./Contacts\";\r\nimport React, {ChangeEvent, useState} from \"react\";\r\n\r\ntype ProfileEditPropsType = {\r\n    profile: UserProfileType,\r\n    changeEditMode: () => void,\r\n    setProfileData: (profileData: ProfileDataType) => void\r\n}\r\n\r\nexport const ProfileDescriptionEditForm = (props: ProfileEditPropsType) => {\r\n\r\n    let [nameField, setNameField] = useState(props.profile.fullName)\r\n    let changeName = (e: ChangeEvent<HTMLInputElement>) => setNameField(e.currentTarget.value)\r\n\r\n    let [aboutMeField, setAboutMeField] = useState(props.profile.aboutMe)\r\n    let changeAboutMe = (e: ChangeEvent<HTMLTextAreaElement>) => setAboutMeField(e.currentTarget.value)\r\n\r\n    let [lookingForAJobField, setLookingForAJobField] = useState(props.profile.lookingForAJob)\r\n    let changeLookingForAJob = (e: ChangeEvent<HTMLInputElement>) => setLookingForAJobField(e.currentTarget.checked)\r\n\r\n    let [mySkillsField, setMySkillsField] = useState(props.profile.lookingForAJobDescription)\r\n    let changeMySkills = (e: ChangeEvent<HTMLTextAreaElement>) => setMySkillsField(e.currentTarget.value)\r\n\r\n\r\n    let onSubmit = () => {\r\n        let profileData = {\r\n            fullName: nameField,\r\n            aboutMe: aboutMeField,\r\n            lookingForAJob: lookingForAJobField,\r\n            lookingForAJobDescription: mySkillsField,\r\n          //  contacts: {\r\n          //      github: 'https://github.com/denya54',\r\n           //     vk: 'https://vk.com/nice_dgl',\r\n         //       instagram: 'https://www.instagram.com/khvesenya.denis/'\r\n          //  }\r\n        }\r\n        props.setProfileData(profileData)\r\n        props.changeEditMode()\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <p>My name <input value={nameField}\r\n                                  onChange={changeName}\r\n                />\r\n                </p>\r\n                <p>About me: <textarea value={aboutMeField}\r\n                                    onChange={changeAboutMe}/></p>\r\n            </div>\r\n\r\n            <div>\r\n                <p>Looking for a job: <input type={'checkbox'}\r\n                                             checked={lookingForAJobField}\r\n                                             onChange={changeLookingForAJob}/></p>\r\n                <p>My professional skills: <textarea value={mySkillsField}\r\n                                                  onChange={changeMySkills}/></p>\r\n            </div>\r\n            <div>\r\n                {props.profile.contacts && <p>Contacts: {Object.keys(props.profile.contacts).map((key) => {\r\n                    // @ts-ignore\r\n                    return <ContactsEditForm key={key} contactTitle={key} contactValue={props.profile?.contacts[key]}/>\r\n                })}</p>}\r\n            </div>\r\n            <button onClick={onSubmit}>Save</button>\r\n        </div>\r\n    )\r\n}\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport classes from './ProfileInfo.module.css';\r\nimport {ProfileDataType, UserProfileType} from \"../../../redux/profile-reducer\";\r\nimport {Preloader} from \"../../common/Preloader/Preloader\";\r\nimport ProfileStatus from \"./ProfileStatus\";\r\nimport mainPhoto from \"../../../assets/images/nophotoava.png\";\r\nimport {Contacts} from \"./Contacts\";\r\nimport {ProfileDescriptionEditForm} from \"./ProfileDescriptionEditForm\";\r\n\r\ntype ProfileInfoPropsType = {\r\n    profile: UserProfileType | null\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (photo: File) => void\r\n    setProfileData: (profileData: ProfileDataType) => void\r\n}\r\n\r\nconst ProfileInfo = (props: ProfileInfoPropsType) => {\r\n\r\n    const [editMode, setEditMode] = useState(false)\r\n\r\n    if (!props.profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files !== null) {\r\n            props.savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={classes.descriptionBlock}>\r\n                {props.profile.photos.large ? <img className={classes.picture} src={props.profile.photos.large}/> :\r\n                    <img src={mainPhoto} className={classes.picture}/>}\r\n\r\n                <ProfileStatus\r\n                    status={props.status}\r\n                    updateStatus={props.updateStatus}\r\n                />\r\n                {props.isOwner &&\r\n                <div>Для загрузки нового аватара <input type={'file'} onChange={onMainPhotoSelected}/></div>}\r\n            </div>\r\n            {editMode\r\n                ? <ProfileDescriptionEditForm profile={props.profile}\r\n                                                    changeEditMode={() => setEditMode(false)}\r\n                                                    setProfileData={props.setProfileData}/>\r\n                : <ProfileDescription profile={props.profile}\r\n                                      isOwner={props.isOwner}\r\n                                      changeEditMode={() => setEditMode(true)}/>}\r\n        </div>\r\n    )\r\n}\r\nexport default ProfileInfo;\r\n\r\n\r\nexport const ProfileDescription = (props: { profile: UserProfileType, isOwner: boolean, changeEditMode: () => void }) => {\r\n    return (\r\n        <div>\r\n            <div>\r\n                <p>My name {props.profile.fullName}</p>\r\n                <p>About me: {props.profile.aboutMe}</p>\r\n            </div>\r\n\r\n            <div>\r\n                <p>Looking for a job: {props.profile.lookingForAJob ? 'yes' : 'no'}</p>\r\n                <p>My professional skills: {props.profile.lookingForAJobDescription}</p>\r\n            </div>\r\n            <div>\r\n                {props.profile.contacts && <p>Contacts: {Object.keys(props.profile.contacts).map((key) => {\r\n                    // @ts-ignore\r\n                    return <Contacts key={key} contactTitle={key} contactValue={props.profile?.contacts[key]}/>\r\n                })}</p>}\r\n            </div>\r\n            {props.isOwner && <button onClick={props.changeEditMode}>Change Profile Info</button>}\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from 'react';\r\nimport classes from './Post.module.css'\r\nimport {postType} from \"../../../../redux/profile-reducer\";\r\n\r\n\r\n\r\nconst Post = (props: postType) => {\r\n    return (\r\n        <div className={classes.item}>\r\n            <img\r\n                src={'https://i.pinimg.com/236x/ad/f8/46/adf8468dafd48dc33091e0790d000c0e--dog-breath-high-five.jpg?nii=t'}/>\r\n            {props.message}\r\n            <div>\r\n                <span>like </span>{props.likesCount}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default Post;","import classes from './MyPost.module.css'\r\nimport React from \"react\";\r\nimport Post from \"./Post1/Post\";\r\nimport {MyPostPropsType} from \"./MyPostContainer\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators\";\r\nimport {Textarea} from \"../../common/FormsControls/FormsConrols\";\r\nimport { AddMessageFormik } from '../../Dialogs/Dialogs';\r\nimport { useFormik } from 'formik';\r\nimport { useDispatch } from 'react-redux';\r\nimport { addPostActionCreator } from '../../../redux/profile-reducer';\r\n\r\ntype FormikErrorType = {\r\n    newPostText?: string\r\n}\r\n\r\nconst MyPost = React.memo((props: MyPostPropsType) => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            newPostText: ''\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(addPostActionCreator(values.newPostText))\r\n            formik.resetForm()\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n                if(!values.newPostText) {\r\n                    errors.newPostText = 'Post must be more 0 symbols '\r\n            }\r\n                return errors\r\n        }\r\n    })\r\n\r\n    let postsElement = props.statePosts.map(post => <Post key={post.id}\r\n                                                          message={post.message}\r\n                                                          likesCount={post.likesCount}/>)\r\n\r\n    let onAddPost = (values: any) => {\r\n        props.addPost(values.newPostText)\r\n    }\r\n\r\n    return (\r\n        <div className={classes.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <form onSubmit={formik.handleSubmit}>\r\n            <textarea\r\n                name={'newPostText'}\r\n                onChange={formik.handleChange}\r\n                value={formik.values.newPostText}\r\n                onBlur={formik.handleBlur}\r\n            />\r\n                <button>Create POST</button>\r\n            </form>\r\n            {formik.errors.newPostText && <div style={{color: 'red'}}>{formik.errors.newPostText}</div>}\r\n\r\n            <div className={classes.posts}>\r\n                {postsElement}\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\n\r\n\r\nlet maxLength10 = maxLengthCreator(10)\r\n\r\n\r\nexport default MyPost;","import React from \"react\";\r\nimport {addPostActionCreator, postType} from \"../../../redux/profile-reducer\";\r\nimport MyPost from \"./MyPost\";\r\nimport {StateType} from \"../../../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\nimport {Dispatch} from \"redux\";\r\n\r\n\r\nexport type MapDispatchReturnType = {\r\n    // updateNewPostText: (text: string) => void\r\n    addPost: (text: string) => void\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchReturnType => {\r\n    return {\r\n        // updateNewPostText: (text: string) => {\r\n        //     let action = updateNewPostTextActionCreator(text)\r\n        //     dispatch(action);\r\n        // },\r\n        addPost: (text: string) => {\r\n            dispatch(addPostActionCreator(text));\r\n        }\r\n    }\r\n}\r\n\r\nexport type MapStatePropsReturnType = {\r\n    statePosts: Array<postType>\r\n    // newPostText: string\r\n}\r\n\r\nconst mapStateToProps = (state: StateType) : MapStatePropsReturnType => {\r\n    return {\r\n        statePosts: state.profilePage.posts,\r\n        // newPostText: state.profilePage.newPostText\r\n    }\r\n}\r\n\r\nexport type MyPostPropsType = MapDispatchReturnType & MapStatePropsReturnType\r\n\r\nconst MyPostContainer = connect(mapStateToProps, mapDispatchToProps)(MyPost)\r\n\r\nexport default MyPostContainer;","import React from 'react';\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostContainer from \"./MyPosts/MyPostContainer\";\r\nimport {ProfileDataType, UserProfileType} from \"../../redux/profile-reducer\";\r\n\r\ntype ProfilePropsType = {\r\n    profile: UserProfileType | null\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    setPhoto: (photo: File) => void\r\n    setProfileData: (profileData: ProfileDataType) => void\r\n}\r\n\r\nconst Profile = (props: ProfilePropsType) => {\r\n    // myID=20162\r\n    return (\r\n        <div>\r\n            <ProfileInfo\r\n                profile={props.profile}\r\n                status={props.status}\r\n                updateStatus={props.updateStatus}\r\n                isOwner={props.isOwner}\r\n                savePhoto={props.setPhoto}\r\n                setProfileData={props.setProfileData}\r\n            />\r\n            {/*<MyPost statePosts={props.stateProfile.posts}*/}\r\n            {/*        dispatch={props.dispatch}*/}\r\n            {/*        newPostText={props.stateProfile.newPostText}*/}\r\n            {/*/>*/}\r\n            <MyPostContainer/>\r\n        </div>\r\n    )\r\n}\r\nexport default Profile;","import React from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {StateType} from \"../../redux/redux-store\";\r\nimport {\r\n    getStatusThunk,\r\n    getUserProfileThunk,\r\n    postType, ProfileDataType, updatePhotoThunk, updateProfileThunk, updateStatusThunk,\r\n    UserProfileType\r\n} from \"../../redux/profile-reducer\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\ntype PropsType = RouteComponentProps<PathParamsType> & ProfilePropsType\r\n\r\n\r\nclass ProfileContainer extends React.Component <PropsType> {\r\n\r\n    refreshProfile(){\r\n        let userId = this.props.match.params.userId\r\n        if (!userId) {\r\n            userId =  this.props.authorisedUserID\r\n            if (!userId) {\r\n                this.props.history.push('/login')\r\n            }\r\n        }\r\n        this.props.getUserProfileWithThunk(userId);\r\n        this.props.getStatusWithThunk(userId)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<PropsType>, prevState: Readonly<{}>, snapshot?: any) {\r\n        if (this.props.match.params.userId !== prevProps.match.params.userId ) {\r\n            this.refreshProfile()\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        // if (!this.props.isAuth) return <Redirect to={'/login'}/>\r\n        return (\r\n            <Profile\r\n                {...this.props}\r\n                isOwner={!this.props.match.params.userId}\r\n                profile={this.props.profile}\r\n                status={this.props.status}\r\n                updateStatus={this.props.updateStatusWithThunk}\r\n                setPhoto={this.props.updatePhotoWithThunk}\r\n                setProfileData={this.props.updateProfileWithThunk}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\n// let AuthRedirectComponent = withAuthRedirect(ProfileContainer)\r\n\r\nlet mapStateToProps = (state: StateType): MapStatePropsReturnType => ({\r\n    profile: state.profilePage.profile,\r\n    posts: state.profilePage.posts,\r\n    status: state.profilePage.status,\r\n    authorisedUserID: state.auth.id,\r\n    isAuth: state.auth.isAuth\r\n\r\n})\r\n\r\ntype MapStatePropsReturnType = {\r\n    posts: Array<postType>\r\n    profile: UserProfileType | null\r\n    status: string\r\n    authorisedUserID: string\r\n    isAuth: boolean\r\n}\r\n\r\ntype MapDispatchPropsReturnType = {\r\n    // setUserProfile: (profile: UserProfileType) => void\r\n    getUserProfileWithThunk: (userId: string ) => void\r\n    getStatusWithThunk: (userId: string)  => void\r\n    updateStatusWithThunk: (status: string) => void\r\n    updatePhotoWithThunk: (photo: File) => void\r\n    updateProfileWithThunk: (profileData: ProfileDataType) => void\r\n}\r\n\r\n\r\nexport type ProfilePropsType = MapDispatchPropsReturnType & MapStatePropsReturnType\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {\r\n        getUserProfileWithThunk: getUserProfileThunk,\r\n        getStatusWithThunk: getStatusThunk,\r\n        updateStatusWithThunk: updateStatusThunk,\r\n        updatePhotoWithThunk: updatePhotoThunk,\r\n        updateProfileWithThunk: updateProfileThunk\r\n    }),\r\n    withRouter,\r\n    withAuthRedirect\r\n)(ProfileContainer)","import arrayWithHoles from \"@babel/runtime/helpers/esm/arrayWithHoles\";\nimport iterableToArrayLimit from \"@babel/runtime/helpers/esm/iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableRest from \"@babel/runtime/helpers/esm/nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","export const required = (value: string) => {\r\n    if (value) {\r\n        return undefined\r\n    } else {\r\n        return 'Field is empty'\r\n    }\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength: number) => (value: string) => {\r\n    if (value.length > maxLength) {\r\n        return `Max length is ${maxLength} symbols`\r\n    } else {\r\n        return undefined\r\n    }\r\n}","import objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","import React, {ComponentType} from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {StateType} from \"../redux/redux-store\";\r\n\r\ntype MapStatePropsType = { isAuth: boolean }\r\n\r\nconst mapStateToProps = (state: StateType): MapStatePropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport function withAuthRedirect  <T>(Component: ComponentType<T>) {\r\n    const RedirectComponent = (props: MapStatePropsType) => {\r\n        // деструктуризация пропсов:\r\n        let {isAuth, ...restProps} = props\r\n\r\n        if (!isAuth) return <Redirect to={'/login'}/>\r\n        return <Component {...restProps as T}/>\r\n    }\r\n    let ConnectedRedirectComponent = connect(mapStateToProps)(RedirectComponent)\r\n\r\n    return ConnectedRedirectComponent\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__3sjtI\",\"picture\":\"ProfileInfo_picture__dwuAz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contacts\":\"Contacts_contacts__2P44K\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPost_postsBlock__38F5G\",\"posts\":\"MyPost_posts__2Np6r\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__3frWF\"};"],"sourceRoot":""}